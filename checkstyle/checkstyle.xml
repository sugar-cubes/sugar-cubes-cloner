<?xml version="1.0" encoding="utf-8"?>
<!--

    Copyright 2017-2022 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--
    Checkstyle rules definition file.
    http://checkstyle.sourceforge.net/availablechecks.html

    Note. Do NOT delete second level element comments!
    They are used in checkstyle-to-docbook.xsl to form section titles.

-->
<module name="Checker">

    <property name="charset" value="UTF-8"/>

    <!-- No tab characters. -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Limit file size -->
    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <module name="NewlineAtEndOfFile"/>

    <module name="SuppressWarningsFilter"/>

    <module name="UniqueProperties">
        <property name="fileExtensions" value="properties"/>
    </module>


    <!--===============================================================================
     Code style rules.
    ================================================================================-->
    <module name="TreeWalker"> <!-- Size limitations rules  -->

        <module name="AnonInnerLength">
            <property name="max" value="30"/>
        </module>

        <module name="ExecutableStatementCount">
            <property name="max" value="30"/>
            <property name="tokens" value="CTOR_DEF, METHOD_DEF, INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <module name="LineLength">
            <property name="ignorePattern" value="^$"/>
            <property name="max" value="150"/>
        </module>

        <module name="MethodCount">
            <property name="maxTotal" value="100"/>
            <property name="maxPrivate" value="100"/>
            <property name="maxPackage" value="100"/>
            <property name="maxProtected" value="100"/>
            <property name="maxPublic" value="100"/>
            <property name="tokens" value="CLASS_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, ANNOTATION_DEF"/>
        </module>

        <module name="MethodLength">
            <property name="max" value="150"/>
            <property name="countEmpty" value="true"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <module name="OuterTypeNumber">
            <property name="max" value="1"/>
        </module>

        <module name="ParameterNumber">
            <property name="max" value="7"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
        </module>

    </module>

    <module name="TreeWalker"> <!-- Naming rules -->

        <!-- Suppression files and expressions are mot encouraged. So it disabled. -->
        <!-- <module name="SuppressWarnings"/> -->

        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE:OFF"/>
            <property name="onCommentFormat" value="CHECKSTYLE:ON"/>
        </module>

        <module name="SuppressWarningsHolder"/>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!--
            An exception is made for LOGGER declaration. Is it make sense?
        -->
        <module name="CatchParameterName">
            <property name="format" value="^(e|t|ex|[a-z][a-z][a-zA-Z]+)$"/>
        </module>

        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <module name="LambdaParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="VARIABLE_DEF, PARAMETER_DEF, RESOURCE"/>
        </module>

        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="false"/>
        </module>

        <module name="MemberName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="MethodName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowClassName" value="false"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]$"/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
        </module>

        <module name="ParameterName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="StaticVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <!-- <property name="tokens" value="INTERFACE_DEF, CLASS_DEF"/> -->
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF"/>
        </module>

    </module>

    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="TreeWalker"> <!-- Imports rules  -->

        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math"/>
            <property name="allowClassImports" value="false"/>
            <property name="allowStaticMemberImports" value="false"/>
        </module>

        <!-- <module name="AvoidStaticImport"/> -->

        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun.*"/>
            <!-- <property name="illegalClasses" value="???"/> -->
            <property name="regexp" value="false"/>
        </module>

        <module name="ImportOrder">
            <property name="option" value="under"/>
            <property name="groups" value="java,javax,org,net,com"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <!-- <property name="separatedStaticGroups" value="true"/> -->
            <property name="caseSensitive" value="true"/>
            <!-- <property name="staticGroups" value="???"/> -->
            <!-- <property name="sortStaticImportsAlphabetically" value="false"/> -->
            <!-- <property name="useContainerOrderingForStatic" value="false"/> -->
            <property name="tokens" value="STATIC_IMPORT"/>
        </module>

        <module name="RedundantImport"/>

        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>
    </module>


    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="TreeWalker"> <!-- Whitespace rules-->

        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true"/>
        </module>

        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"/>
        </module>

        <!-- TODO: Understand how it works -->
        <!-- <module name="DescendantToken"> -->

        <!-- While these checks are conceptually good they pollute source code  -->
        <!-- <module name="FinalParameters"/> -->

        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="forceStrictCondition" value="true"/>
        </module>

        <module name="OuterTypeFilename"/>

        <module name="TodoComment">
            <property name="format" value="TODO:"/>
        </module>

        <module name="TrailingComment">
            <property name="format" value="^[\s});]*$"/>
        </module>

        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>

        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
            <property name="allowEmptyConstructors" value="false"/>
            <property name="allowEmptyMethods" value="false"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT, BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="false"/>
        </module>

        <module name="ParenPad">
            <property name="option" value="nospace"/>
            <!-- <property name="tokens" value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL"/> -->
            <property name="tokens" value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA"/>
        </module>

        <module name="TypecastParenPad">
            <property name="tokens" value="TYPECAST, RPAREN"/>
            <property name="option" value="nospace"/>
        </module>

        <module name="MethodParamPad">
            <property name="option" value="nospace"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL, ENUM_CONSTANT_DEF"/>
            <!-- <property name="tokens" value="CTOR_CALL, LPAREN, METHOD_CALL, RPAREN, SUPER_CTOR_CALL"/> -->
        </module>

        <!--
        <module name="OperatorWrap"/>
        -->
    </module>

    <module name="TreeWalker"> <!-- Modifier rules -->

        <module name="InterfaceMemberImpliedModifier">
            <property name="violateImpliedPublicField" value="false"/>
            <property name="violateImpliedStaticField" value="false"/>
            <property name="violateImpliedFinalField" value="false"/>
            <property name="violateImpliedPublicMethod" value="false"/>
            <property name="violateImpliedAbstractMethod" value="false"/>
            <property name="violateImpliedPublicNested" value="false"/>
            <property name="violateImpliedStaticNested" value="false"/>
        </module>

        <module name="ModifierOrder"/>

        <module name="RedundantModifier">
            <property name="tokens" value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF, RESOURCE"/>
        </module>

    </module>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="TreeWalker"> <!-- Block rules -->

        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="false"/>
        </module>

        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_WHILE, LITERAL_TRY, LITERAL_FINALLY, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, INSTANCE_INIT, STATIC_INIT, LITERAL_SWITCH, LITERAL_SYNCHRONIZED"/>
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="^$"/>
            <property name="commentFormat" value=".*"/>
        </module>

        <module name="LeftCurly">
            <property name="option" value="eol"/>
            <property name="ignoreEnums" value="true"/>
            <property name="tokens" value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT"/>
        </module>

        <module name="NeedBraces">
            <property name="allowSingleLineStatement" value="false"/>
            <property name="allowEmptyLoopBody" value="false"/>
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE"/>
        </module>

<!--
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="shouldStartLine" value="true"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT, LAMBDA"/>
        </module>
-->

    </module>

    <module name="TreeWalker"> <!-- Javadoc rules -->

        <module name="JavadocMethod">
            <property name="minLineCount" value="-1"/>
            <property name="allowedAnnotations" value="Override"/>
            <property name="validateThrows" value="false"/>
            <property name="scope" value="protected"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="false"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags " value="true"/>
            <property name="allowMissingReturnTag " value="true"/>
            <property name="allowMissingJavadoc " value="false"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="false"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF"/>
        </module>

        <module name="JavadocParagraph">
            <property name="violateExecutionOnNonTightHtml" value="true"/>
            <property name="allowNewlineParagraph" value="true"/>
        </module>

        <module name="JavadocStyle">
            <property name="scope" value="protected"/>
            <property name="checkFirstSentence" value="true"/>
            <!-- TODO: check expression -->
            <property name="endOfSentenceFormat" value="([.?!][ \t\n\r\f])|([.?!]$)"/>
            <property name="checkEmptyJavadoc" value="true"/>
            <property name="checkHtml" value="false"/>
            <property name="tokens" value="ANNOTATION_DEF, ANNOTATION_FIELD_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, METHOD_DEF, PACKAGE_DEF, VARIABLE_DEF"/>
        </module>

        <module name="JavadocTagContinuationIndentation">
            <property name="violateExecutionOnNonTightHtml" value="false"/>
            <property name="offset" value="4"/>
        </module>

        <module name="JavadocType">
            <property name="scope" value="protected"/>
            <!-- <property name="excludeScope" value="null"/> -->
            <property name="authorFormat" value=".*"/>
            <!-- <property name="versionFormat" value="null"/> -->

            <!-- TODO: change to false-->
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowUnknownTags" value="false"/>
            <property name="tokens" value="INTERFACE_DEF, CLASS_DEF, ENUM_DEF, ANNOTATION_DEF"/>
        </module>

        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
            <property name="tokens" value="ENUM_CONSTANT_DEF"/>
        </module>

        <module name="NonEmptyAtclauseDescription">
            <property name="violateExecutionOnNonTightHtml" value="false"/>
            <property name="javadocTokens" value="PARAM_LITERAL, RETURN_LITERAL, THROWS_LITERAL, EXCEPTION_LITERAL, DEPRECATED_LITERAL"/>
        </module>

        <module name="SingleLineJavadoc"/>

        <module name="SummaryJavadocCheck">
            <property name="violateExecutionOnNonTightHtml" value="false"/>
            <property name="forbiddenSummaryFragments" value="^$"/>
            <property name="period" value="."/>
        </module>
    </module>

    <module name="TreeWalker"> <!-- Header rules -->
        <!--
            <module name="Header">
                <property name="headerFile" value="java.header"/>
                <property name="header" value="header text goes here"/>
                <property name="ignoreLines" value="2, 3, 4"/>
            </module>
        -->
    </module>

    <!--===============================================================================
     Bad coding practice rules.
    ================================================================================-->
    <module name="TreeWalker"> <!-- Coding rules -->

        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>

        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <module name="Regexp">
            <property name="format" value="System\.err\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <module name="Regexp">
            <property name="format" value="\.printStackTrace"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <!-- Prevent empty html paragraph in javadocs -->
        <module name="Regexp">
            <property name="format" value="&lt;p\/&gt;"/>
            <property name="illegalPattern" value="true"/>
        </module>

        <module name="StringLiteralEquality"/>

        <module name="EqualsHashCode"/>

        <module name="BooleanExpressionComplexity">
            <property name="max" value="7"/>
        </module>

        <module name="MagicNumber">
            <property name="ignoreNumbers" value="0, 0.5, 1, -1, 2"/>
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotation" value="false"/>
            <property name="ignoreFieldDeclaration" value="false"/>
            <property name="constantWaiverParentToken" value="TYPECAST, METHOD_CALL, EXPR, ARRAY_INIT, UNARY_MINUS, UNARY_PLUS, ELIST, STAR, ASSIGN, PLUS, MINUS, DIV, LITERAL_NEW"/>
            <property name="tokens" value="NUM_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG"/>
        </module>

        <module name="CyclomaticComplexity">
            <property name="max" value="10"/>
            <property name="switchBlockAsSingleDecisionPoint" value="false"/>
            <property name="tokens" value="LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_CASE, LITERAL_CATCH, QUESTION, LAND, LOR"/>
        </module>

        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="1"/>
            <property name="ignoreOccurrenceContext" value="ANNOTATION"/>
        </module>

        <module name="NPathComplexity">
            <property name="max" value="200"/>
        </module>

        <module name="JavaNCSS">
            <property name="methodMaximum" value="150"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="3000"/>
        </module>

    </module>

</module>
